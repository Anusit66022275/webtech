function goToCheckout() {
    window.location.href = "/checkout";
}

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
async function loadCart() {
    try {
        console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...");

        const response = await fetch('/cart/data');
        if (!response.ok) throw new Error(`‚ùå HTTP Error: ${response.status}`);

        const data = await response.json();
        console.log("üì¶ ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", data);

        const cartList = document.getElementById("cart-items-list");
        const totalPriceElement = document.getElementById("total-price");

        if (!cartList || !totalPriceElement) {
            console.error("‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö cart-items-list ‡∏´‡∏£‡∏∑‡∏≠ total-price ‡πÉ‡∏ô DOM");
            return;
        }

        // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        cartList.innerHTML = "";
        let total = 0;

        if (data.cart.length === 0) {
            cartList.innerHTML = "<li class='list-group-item text-center'>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</li>";
        }

        data.cart.forEach((item, index) => {
            total += item.price * item.quantity;

            cartList.innerHTML += `
                <li class="list-group-item d-flex align-items-center">
                    <img src="${item.image}" 
                         onerror="this.onerror=null; this.src='/uploads/default.png';" 
                         style="width: 50px; height: 50px; margin-right: 10px;">
                    <div>
                        <h5>${item.title}</h5>
                        <p>${item.price} ‡∏ö‡∏≤‡∏ó</p>
                    </div>
                    <div class="ms-auto">
                        <button class="btn btn-secondary decrease-btn" onclick="updateCart(${index}, 'decrease')">‚ûñ</button>
                        <span class="mx-2">${item.quantity}</span>
                        <button class="btn btn-secondary increase-btn" onclick="updateCart(${index}, 'increase')">‚ûï</button>
                        <button class="btn btn-danger ms-2 remove-item" onclick="removeFromCart(${index})">‚ùå</button>
                    </div>
                </li>`;
        });

        totalPriceElement.innerText = `${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;

    } catch (error) {
        console.error("‚ùå Error loading cart:", error);
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
async function addToCart(bookId, title, price, image) {
    try {
        console.log("üõí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤:", { bookId, title, price, image });

        const response = await fetch('/cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: bookId, title, price, quantity: 1, image })
        });

        const data = await response.json();
        if (data.success) {
            console.log("‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!");
            alert("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!");
            loadCart(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        } else {
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.error);
        }
    } catch (error) {
        console.error("‚ùå Error adding to cart:", error);
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
async function updateCart(index, action) {
    try {
        console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ index: ${index}, action: ${action}`);

        const response = await fetch('/cart/update', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ index, action })
        });

        const data = await response.json();
        if (data.success) {
            console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
            loadCart();
        } else {
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
        }
    } catch (error) {
        console.error("‚ùå Error updating cart:", error);
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
async function removeFromCart(index) {
    try {
        console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ index: ${index}`);

        const response = await fetch('/cart/remove', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ index })
        });

        const data = await response.json();
        if (data.success) {
            console.log("‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
            loadCart();
        } else {
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.message);
        }
    } catch (error) {
        console.error("‚ùå Error removing item from cart:", error);
    }
}
